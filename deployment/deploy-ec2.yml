AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create
  a VPC with a single public subnet, an Amazon EC2 instance running the Amazon Linux AMI 2. 
  The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security
  group for the instance to give you SSH access. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used
  if you create a stack from this template.
Parameters:
  AppName:
    Description: Name of the app
    Type: String
    Default: ielts-masters
  AppVersion:
    Description: Version of the app
    Type: String
    Default: latest
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegionToAMI:
    af-south-1:
      AMIID: 'ami-03590d67411bbd24e'
    eu-north-1:
      AMIID: 'ami-0f0b4cb72cf3eadf3'
    ap-south-1:
      AMIID: 'ami-0a23ccb2cdd9286bb'
    eu-west-3:
      AMIID: 'ami-072056ff9d3689e7b'
    eu-west-2:
      AMIID: 'ami-0dbec48abfe298cab'
    eu-south-1:
      AMIID: 'ami-043c883e65558daa0'
    eu-west-1:
      AMIID: 'ami-0d1bf5b68307103c2'
    ap-northeast-3:
      AMIID: 'ami-09ec82600a05bc23a'
    ap-northeast-2:
      AMIID: 'ami-08c64544f5cfcddd0'
    me-south-1:
      AMIID: 'ami-0cc423da78c883d64'
    ap-northeast-1:
      AMIID: 'ami-02892a4ea9bfa2192'
    sa-east-1:
      AMIID: 'ami-09b9b17384f68fd7c'
    ca-central-1:
      AMIID: 'ami-0e2407e55b9816758'
    ap-east-1:
      AMIID: 'ami-0de9d09f41c5e334c'
    ap-southeast-1:
      AMIID: 'ami-082105f875acab993'
    ap-southeast-2:
      AMIID: 'ami-0210560cedcb09f07'
    eu-central-1:
      AMIID: 'ami-07df274a488ca9195'
    us-east-1:
      AMIID: 'ami-087c17d1fe0178315'
    us-east-2:
      AMIID: 'ami-00dfe2c7ce89a450b'
    us-west-1:
      AMIID: 'ami-011996ff98de391d1'
    us-west-2:
      AMIID: 'ami-0c2d06d50ce30b442'
Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AppName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AppName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AppName} Public Subnet (AZ1)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AppName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  # EC2 Instance
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecr-read-
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      KeyName: !Ref AppName
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !FindInMap 
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            chkconfig docker on
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 729558869010.dkr.ecr.ap-southeast-1.amazonaws.com
            docker pull 729558869010.dkr.ecr.ap-southeast-1.amazonaws.com/${AppName}:${AppVersion}
            docker run -d -p 80:3000 729558869010.dkr.ecr.ap-southeast-1.amazonaws.com/${AppName}:${AppVersion}
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: Reference to the public subnet created
    Value: !Ref PublicSubnet1

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicIp